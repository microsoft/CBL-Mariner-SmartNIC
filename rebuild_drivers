#!/bin/bash

###############################################################################
#
# Copyright 2022 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################

DOCA_VERSION=2.2.0
BF_VERSION=4.2.0-12855
MLNX_OFED_VERSION=23.07-0.5.0.0
WDIR=${WDIR:-/tmp}
BASE_URL=${BASE_URL:-"https://linux.mellanox.com/public/repo"}

# Execute command w/ echo and exit if it fail
ex()
{
	echo "$@"
	if ! "$@"; then
		printf "\nFailed executing $@\n\n"
		exit 1
	fi
}

kernel=$1

# Check if existing drivers compiled with the installed kernel
if [ "$(rpm -qf --queryformat "[%{NAME}]" $(modinfo -n -k $kernel mlx5_core))" == "mlnx-ofa_kernel-modules" ]; then
	echo "MLNX_OFED drivers compiled for ${kernel}. No need to recompile."
	exit 0
fi

if (rpm -q dw_mmc > /dev/null 2>&1); then
	rpm -e dw_mmc
fi

mkdir -p $WDIR
cd $WDIR

cat >> /root/.rpmmacros << EOF
%debug_package %{nil}
%with_debuginfo 0
%__debug_install_post %{nil}
%_exec_prefix %{_prefix}
%_sbindir   %{_exec_prefix}/sbin
%_datadir   %{_datarootdir}
%_datarootdir       %{_prefix}/share
%_includedir       %{_prefix}/include
%__make       /usr/bin/make
EOF


# Build and install MLNX_OFED drivers
ex wget --no-check-certificate --quiet ${BASE_URL}/bluefield/${BF_VERSION}/extras/mlnx_ofed/${MLNX_OFED_VERSION}/MLNX_OFED_SRC-${MLNX_OFED_VERSION}.tgz
ex tar xzf MLNX_OFED_SRC-${MLNX_OFED_VERSION}.tgz
ex MLNX_OFED_SRC-${MLNX_OFED_VERSION}/install.pl -U -k $kernel --kernel-extra-args '--with-sf-cfg-drv --without-xdp --without-odp' --kernel-only --disable-kmp --bluefield --with-iser-modules --with-xpmem-modules

ex /bin/rm -f /etc/infiniband/vf-net-link-name.sh
ex cp /usr/share/doc/mlnx-ofa_kernel/vf-net-link-name.sh /etc/infiniband/vf-net-link-name.sh
ex chmod +x /etc/infiniband/vf-net-link-name.sh
ex /bin/rm -f /etc/udev/rules.d/82-net-setup-link.rules
ex cp /usr/share/doc/mlnx-ofa_kernel/82-net-setup-link.rules /etc/udev/rules.d/82-net-setup-link.rules

# find MLNX_OFED_SRC-${MLNX_OFED_VERSION}/RPMS -name '*rpm' -a ! -name '*debuginfo*rpm' -exec rpm -ihv '{}' \;

# Build and install BlueField SoC drivers
ex wget --quiet --no-check-certificate -r -np -nH --cut-dirs=3 -R "index.html*" ${BASE_URL}/bluefield/${BF_VERSION}/extras/SRPMS/
mkdir -p ${WDIR}/${BF_VERSION}/extras/{SPECS,RPMS,SOURCES,BUILD}

for p in ${WDIR}/${BF_VERSION}/extras/SRPMS/*.src.rpm
do
	case $p in
		*rshim* | *libpka* | *mlx-OpenIPMI* | *mlxbf-bootctl* | *ipmb-host* | *mlx-cpld*)
			continue
			;;
		*dw_mmc*)
			/bin/rm -f $p
			wget  --quiet --no-check-certificate -P ${WDIR}/${BF_VERSION}/extras/SRPMS/ ${BASE_URL}/bluefield/${BF_VERSION}/extras/5.15/dw_mmc-5.15.36-0.src.rpm
			p=`/bin/ls -1 ${WDIR}/${BF_VERSION}/extras/SRPMS/dw_mmc*.src.rpm`
			;;
	esac
	rpmbuild --rebuild -D "debug_package %{nil}" -D "KVERSION $kernel" --define "KMP 0" --define "_topdir ${WDIR}/${BF_VERSION}/extras" $p
	if [ $? -ne 0 ]; then
		echo $p >> /tmp/SoC.failed
	fi
done

ex rpm -ivh --force ${WDIR}/${BF_VERSION}/extras/RPMS/aarch64/*.rpm

if [ -s /tmp/SoC.failed ]; then
	echo "The following SoC drivers failed to be built:"
	cat /tmp/SoC.failed
fi
